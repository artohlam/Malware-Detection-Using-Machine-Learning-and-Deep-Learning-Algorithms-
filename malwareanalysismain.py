import pandas
import requests
import numpy as np
import sklearn
from sklearn.feature_selection import SelectFromModel
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix

Malware_dataset=pandas.read_csv("MalwareData.csv",sep='|')

Malware_dataset.head()
Legit=Malware_dataset[0:41323].drop(['legitimate'],axis=1)

Malware=Malware_dataset[41324::].drop(['legitimate'],axis=1)

print(Legit.shape[1])

Data=Malware_dataset.drop(['Name','md5','legitimate'],axis=1).values

Target=Malware_dataset['legitimate'].values

Select=sklearn.ensemble.ExtraTreesClassifier().fit(Data,Target)
Model=SelectFromModel(Select,prefit=True)
Data_new=Model.transform(Data)
print(Data.shape)
print(Data_new.shape)

Features=Data_new.shape[1]
Index =np.argsort(sklearn.ensemble.ExtraTreesClassifier().fit(Data,Target).feature_importances_)[::-1][:Features]

for feat in range(Features):
    print(Malware_dataset.columns[2+Index[feat]])

Legit_Tr,Legit_Te,Malware_Tr,Malware_Te=train_test_split(Data_new,Target)
clf=sklearn.ensemble.RandomForestClassifier(n_estimators=50)
clf.fit(Legit_Tr,Malware_Tr)
score=clf.score(Legit_Te,Malware_Te)
print(score*100)

result=clf.predict(Legit_Te)
print("Confusion Matrix:")
CM=confusion_matrix(Malware_Te,result)
print(result)
print(CM)
print("False positive rate : %f %%" % ((CM[0][1] / float(sum(CM[0])))*100))
print('False negative rate : %f %%' % ( (CM[1][0] / float(sum(CM[1]))*100)))
